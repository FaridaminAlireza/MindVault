# The prefix sum technique belongs to the broader category of 
# array processing algorithms / cumulative algorithms.
#  More specifically, it is often considered a preprocessing technique
#  that helps speed up range query problems.

def prefix_sum(arr):
    n = len(arr)
    prefix = [0] * n
    prefix[0] = arr[0]
    
    for i in range(1, n):
        prefix[i] = prefix[i-1] + arr[i]
    
    return prefix



# Pydantic Version
from itertools import accumulate

arr = [1, 2, 3, 4, 5]
prefix = list(accumulate(arr))

print(prefix)  # Output: [1, 3, 6, 10, 15]


# In case of sparse array

arr = {0: 1, 100: 5, 1000: 10}  # sparse array
prefix = {}
running_sum = 0
for i in sorted(arr):
    running_sum += arr[i]
    prefix[i] = running_sum

# Query sum from 0 to 1000
print(prefix[1000])  # Output: 16
