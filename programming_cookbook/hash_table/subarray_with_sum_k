# Finds subarrays with exact sum K in O(n), which is much faster than O(nÂ²).


# Finds the first subarray with exact sum K in O(n).
def subarray_sum(arr, target):

    count_dict = dict()
    prefix_sum = arr[0]
    count_dict[prefix_sum] = 0

    for i in range(1, len(arr)):

        prefix_sum += arr[i]
        count_dict[prefix_sum] = i
        if prefix_sum - target in count_dict:
            return arr[count_dict[prefix_sum - target]+1: count_dict[prefix_sum]+1]
        
    return []

# Finds all the subarrays with exact sum K in O(n).
def subarray_sum(arr, target):

    count_dict = dict()
    result_ls = list()

    prefix_sum = arr[0]
    count_dict[prefix_sum] = 0
    
    for i in range(1, len(arr)):

        prefix_sum += arr[i]
        count_dict[prefix_sum] = i

        if prefix_sum - target in count_dict:
            print('subarray from', count_dict[prefix_sum - target]+1,
                  'to', count_dict[prefix_sum], 'sums to', target)
            result_ls.append(
                arr[count_dict[prefix_sum - target]+1: count_dict[prefix_sum]+1])
        
    return result_ls

arr = [1, 2, 3, -2, 5]
target = 5
print(subarray_sum(arr, target))